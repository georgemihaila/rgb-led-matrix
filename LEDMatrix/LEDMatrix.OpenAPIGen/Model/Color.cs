/*
 * LEDMatrix.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LEDMatrix.Client.Client.OpenAPIDateConverter;

namespace LEDMatrix.Client.Model
{
    /// <summary>
    /// Color
    /// </summary>
    [DataContract(Name = "Color")]
    public partial class Color : IEquatable<Color>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Color" /> class.
        /// </summary>
        /// <param name="r">r.</param>
        /// <param name="g">g.</param>
        /// <param name="b">b.</param>
        public Color(int r = default(int), int g = default(int), int b = default(int))
        {
            this.R = r;
            this.G = g;
            this.B = b;
        }

        /// <summary>
        /// Gets or Sets R
        /// </summary>
        [DataMember(Name = "r", EmitDefaultValue = false)]
        public int R { get; set; }

        /// <summary>
        /// Gets or Sets G
        /// </summary>
        [DataMember(Name = "g", EmitDefaultValue = false)]
        public int G { get; set; }

        /// <summary>
        /// Gets or Sets B
        /// </summary>
        [DataMember(Name = "b", EmitDefaultValue = false)]
        public int B { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Color {\n");
            sb.Append("  R: ").Append(R).Append("\n");
            sb.Append("  G: ").Append(G).Append("\n");
            sb.Append("  B: ").Append(B).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Color);
        }

        /// <summary>
        /// Returns true if Color instances are equal
        /// </summary>
        /// <param name="input">Instance of Color to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Color input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.R == input.R ||
                    this.R.Equals(input.R)
                ) && 
                (
                    this.G == input.G ||
                    this.G.Equals(input.G)
                ) && 
                (
                    this.B == input.B ||
                    this.B.Equals(input.B)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.R.GetHashCode();
                hashCode = (hashCode * 59) + this.G.GetHashCode();
                hashCode = (hashCode * 59) + this.B.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
